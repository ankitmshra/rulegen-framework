from rest_framework import serializers
from .models import EmailFile, RuleGeneration, PromptTemplate


class EmailFileSerializer(serializers.ModelSerializer):
    """Serializer for the EmailFile model."""
    file_url = serializers.SerializerMethodField()

    class Meta:
        model = EmailFile
        fields = ['id', 'file', 'file_url', 'original_filename', 'uploaded_at', 'processed']
        read_only_fields = ['uploaded_at', 'processed', 'original_filename']
        extra_kwargs = {
            'file': {'required': True, 'allow_empty_file': False}
        }

    def get_file_url(self, obj):
        request = self.context.get('request')
        if obj.file and hasattr(obj.file, 'url') and request:
            return request.build_absolute_uri(obj.file.url)
        return None


class PromptTemplateSerializer(serializers.ModelSerializer):
    """Serializer for the PromptTemplate model."""

    class Meta:
        model = PromptTemplate
        fields = ['id', 'name', 'description', 'template', 'is_base', 'is_module',
                  'module_type', 'created_at', 'updated_at']


class RuleGenerationSerializer(serializers.ModelSerializer):
    """Serializer for the RuleGeneration model."""
    email_files = EmailFileSerializer(many=True, read_only=True)
    email_file_ids = serializers.ListField(
        child=serializers.IntegerField(),
        write_only=True
    )
    custom_prompt = serializers.CharField(required=False, write_only=True)
    prompt_modules = serializers.ListField(
        child=serializers.CharField(),
        required=False
    )
    base_prompt_id = serializers.IntegerField(required=False, allow_null=True)

    class Meta:
        model = RuleGeneration
        fields = ['id', 'workspace_name', 'email_files', 'email_file_ids', 'selected_headers',
                  'prompt', 'rule', 'created_at', 'is_complete',
                  'custom_prompt', 'prompt_modules', 'base_prompt_id', 'prompt_metadata']
        read_only_fields = ['rule', 'created_at', 'is_complete', 'prompt_metadata']
        extra_kwargs = {
            'prompt': {'required': False},  # Make prompt field optional
            # Make workspace_name optional for backwards compatibility
            'workspace_name': {'required': False}
        }

    def create(self, validated_data):
        email_file_ids = validated_data.pop('email_file_ids')
        custom_prompt = validated_data.pop('custom_prompt', None)

        # Initialize with empty prompt (will be generated by the service if needed)
        if 'prompt' not in validated_data:
            validated_data['prompt'] = ''

        # If custom prompt was provided, use it directly
        if custom_prompt:
            validated_data['prompt'] = custom_prompt

        # Set default workspace name if not provided
        if 'workspace_name' not in validated_data or not validated_data['workspace_name']:
            validated_data['workspace_name'] = 'Unnamed Workspace'

        rule_generation = RuleGeneration.objects.create(**validated_data)

        # Add the email files to the rule generation
        email_files = EmailFile.objects.filter(id__in=email_file_ids)
        rule_generation.email_files.set(email_files)

        return rule_generation
